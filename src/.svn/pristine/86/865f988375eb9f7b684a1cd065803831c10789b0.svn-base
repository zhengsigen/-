package com.c1801.spring.dzy.controller.order;

import com.c1801.spring.dzy.common.ResData;
import com.c1801.spring.dzy.mapper.OrderMapper;
import com.c1801.spring.dzy.mapper.OrderPayMapper;
import com.c1801.spring.dzy.mapper.UserMapper;
import com.c1801.spring.dzy.model.BalanceDetail;
import com.c1801.spring.dzy.model.OrderAccount;
import com.c1801.spring.dzy.model.OrderPay;
import com.c1801.spring.dzy.model.User;
import com.c1801.spring.dzy.service.MessageTemplateService;
import com.c1801.spring.dzy.service.UserService;
import com.c1801.spring.dzy.service.WXUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;
import java.io.IOException;

@RestController
@Transactional
@RequestMapping("/dzy/order/pay")
public class OrderPayController {

    @Autowired
    OrderMapper orderMapper;

    @Autowired
    WXUserService wxUserService;

    @Autowired
    UserMapper userMapper;

    @Autowired
    OrderPayMapper orderPayMapper;

    @Autowired
    UserService userService;

    @Autowired
    MessageTemplateService messageTemplateService;

    /***
     * @郑思根
     * 订单支付
     * @param orderPay  订单id，订单支付类型
     * @param equipment  设备类型  0、电脑 1、手机
     * @return
     */
    @PostMapping
    public ResData OrderPay(@RequestBody OrderPay orderPay, @RequestParam("equipment") Integer equipment, HttpSession session) throws IOException {
        ResData resData = new ResData();
        //订单id
        Integer orderId = orderPay.getOrderId();
        //支付类型0余额，1微信
        Integer payType = orderPay.getPayType();
        //获取用户
        User user = (User) session.getAttribute("user");
        //获取最新用户状态
        User newSetUser = userMapper.getUserById(user.getId());
        //获取到订单信息
        OrderAccount orderAccount = orderMapper.queryOrderAccountByOrderId(orderId);
        if (orderAccount == null) return ResData.ofFail(1001, "参数缺失");
        //订单总额
        Double total = orderAccount.getTotal();
        if (total == null) return ResData.ofFail(1001, "参数缺失");
        //转换成分
        Long fee = (long) (total * 100);
        //如果是微信支付
        if (payType == 1) {
            //设置微信支付金额
            orderPay.setWxPay(total);
            //如果是手机微信支付
            if (equipment == 1) {
                //获取到JSAPI
                resData = wxUserService.pay(fee, newSetUser);
                //如果是电脑微信支付
            } else {
                //获取NATIVE
                resData = wxUserService.createQR(fee);
            }
            //如果是余额支付
        } else {
            //余额明细对象
            BalanceDetail balanceDetail = new BalanceDetail();
            //如果余额足够
            Double discountTotal = total * 0.88;
            if (newSetUser.getBalance() >= discountTotal) {
                //设置余额支付金额
                orderPay.setFeePay(discountTotal);
                balanceDetail.setFee(discountTotal);
                //扣除余额
                userMapper.BalancePayment(newSetUser.getId(), discountTotal);
                resData.setCode(0);
                resData.setDesc("余额支付成功");
                //如果余额不足
            } else {
                //获取用户88折对应的微信价值
                Double userTotal = newSetUser.getBalance() / 0.88;
                userMapper.BalancePayment(newSetUser.getId(), newSetUser.getBalance());
                //减去余额后需要微信支付的金额
                Long reductionTotal = (long) ((total - userTotal) * 100);
                //设置微信支付金额
                orderPay.setWxPay(total - userTotal);
                //设置余额支付金额
                orderPay.setFeePay(newSetUser.getBalance());
                balanceDetail.setFee(newSetUser.getBalance());
                //如果是手机微信支付
                if (equipment == 1) {
                    //获取到JSAPI
                    resData = wxUserService.pay(reductionTotal, newSetUser);
                    //如果是电脑微信支付
                } else {
                    //获取NATIVE
                    resData = wxUserService.createQR(reductionTotal);
                }
            }
            //新增余额明细
            balanceDetail.setOrderId(orderPay.getOrderId());
            balanceDetail.setUserId(newSetUser.getId());
            balanceDetail.setType(1);
            System.out.println(balanceDetail);
            userService.addBalanceDetail(balanceDetail);
        }
        //订单支付记录
        orderPayMapper.orderPaymentRecord(orderPay);
        return resData;
    }


}
