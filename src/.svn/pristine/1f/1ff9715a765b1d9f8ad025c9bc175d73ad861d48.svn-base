package com.c1801.spring.dzy.service;

import com.alibaba.fastjson.JSON;
import com.c1801.spring.dzy.common.RandomIdCreate;
import com.c1801.spring.dzy.common.ResData;
import com.c1801.spring.dzy.common.XmlHelper;
import com.c1801.spring.dzy.common.wx.qr.QRGenerate;
import com.c1801.spring.dzy.config.WXAuthorizedValids;
import com.c1801.spring.dzy.mapper.UserMapper;
import com.c1801.spring.dzy.model.AuthorizedValids;
import com.c1801.spring.dzy.model.User;
import com.c1801.spring.dzy.model.WXSubscription;
import okhttp3.*;
import org.apache.commons.codec.digest.DigestUtils;
import okhttp3.OkHttpClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.*;

@Service
public class WXUserService {

    RestTemplate restTemplate = new RestTemplate();

    /**
     *
     */
    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    UserMapper userMapper;

    @Autowired
    WXSubscription wxSubscription;

    @Autowired
    WXAuthorizedValids wxAuthorizedValids;

    /**
     * 根据openid查询用户
     *
     * @param openid
     * @return
     */
    public User queryUserByOpenId(String openid) {
        User user = userMapper.queryUserByOpenId(openid);
        return user;
    }

    /**
     * 新增用户并返回新增的用户
     *
     * @param user
     * @return
     */
    public ResData addWXUser(User user) {
        User queryUserByOpenId = userMapper.queryUserByOpenId(user.getOpenId());
        if (queryUserByOpenId != null) {
            return ResData.ofFail(10074, "用户已经注册");
        }
        //新增用户
        userMapper.addWXUser(user);
        //返回新增成功的用户
        User msgUser = userMapper.queryUserByOpenId(user.getOpenId());
        if (msgUser == null) {
            return ResData.ofFail(10073, "新增失败");
        }
        return ResData.of(0, "新增成功", msgUser);
    }

    /**
     * 用户绑定并返回绑定结果
     *
     * @param user
     * @param phone
     * @return
     */
    public ResData UserBinding(User user, String phone) {
        User userByPhone = userMapper.getUserByPhone(phone);
        //用户绑定
        Integer integer = userMapper.UserBinding(user, userByPhone.getId());
        if (integer <= 0) {
            return ResData.ofSuccess(10075, "绑定失败");
        }
        //返回绑定后的用户
        User msgUser = userMapper.queryUserByOpenId(user.getOpenId());
        return ResData.of(0, "绑定成功", msgUser);
    }

    /**
     * 整理失效或过期微信二维码
     *
     * @郑思根
     */
    public void arrangementQR(String state, long validTime) {
        wxAuthorizedValids.getWxAuthorizedValids().remove(state);
        //使用迭代器的remove()方法删除元素
        Iterator<Map.Entry<String, AuthorizedValids>> it = wxAuthorizedValids.getWxAuthorizedValids().entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, AuthorizedValids> entry = it.next();
            long currTime = System.currentTimeMillis();
            if (currTime - entry.getValue().getUpdateDate() > validTime)
                it.remove();
        }
    }


    /**
     * @param tradeType
     * @param fee
     * @return
     * @郑思根 准备数据
     */
    public Map<String, Object> preparingData(String tradeType, Long fee) {
        String nonceStr = UUID.randomUUID().toString().replaceAll("-", "");
        String orderId = UUID.randomUUID().toString().replaceAll("-", "");
        //生成预支付订单
        Map<String, Object> params = new TreeMap<>();
        params.put("appid", wxSubscription.getAppid());
        //商家id
        params.put("mch_id", wxSubscription.getMchid());
        //随机码唯一性
        params.put("nonce_str", nonceStr);
        params.put("body", "金额："+fee/100);
        params.put("out_trade_no", orderId);
        //支付金额
        params.put("total_fee", 1);
        //ip
        params.put("spbill_create_ip", "163.125.69.26");
        //支付方式，二维码
        params.put("trade_type", tradeType);
        //支付结果通知地址
        params.put("notify_url", "http://wx.panqingshan.cn/dzy/wx/notify");
        //签名
        return params;
    }

    /**
     * @param params
     * @return
     * @throws IOException
     * @郑思根 生成预支付订单
     */
    public Map<String, String> getAdvancePaymentOrder(Map<String, Object> params) throws IOException {
        OkHttpClient client = new OkHttpClient();
        // XML
        String xml = toXml(params);
        // 设置请求体
        okhttp3.RequestBody requestBody = RequestBody.create(MediaType.parse("application/xml"), xml);
        // 构建请求
        Request request = new Request.Builder().url("https://api.mch.weixin.qq.com/pay/unifiedorder").post(requestBody).build();
        // 发送请求 - 接收响应
        Response response = client.newCall(request).execute();
        ResponseBody responseBody = response.body();
        String stringXML = responseBody.string();
        //将返回的响应转换成map集合
        Map<String, String> xmlMap = XmlHelper.of(stringXML).toMap();
        return xmlMap;
    }

    /**
     * @param params
     * @return
     * @郑思根 生成签名处理
     */
    public String sign(Map<String, Object> params) {
        Set<String> packageSet = params.keySet();
        StringBuffer sign = new StringBuffer();
        for (String param : packageSet) {
            if (param == null || param.trim().length() == 0) continue;
            if (sign.length() > 0) {
                sign.append("&");
            }
            sign.append(param).append("=").append(params.get(param));
        }
        sign.append("&key=").append("lakJYzxp5znq5Pz1JYDBGInzrUNVAeYj");
        return DigestUtils.md5Hex(sign.toString());
    }

    /**
     * @param params
     * @return
     * @郑思根 String转换成XML
     */
    public String toXml(Map<String, Object> params) {
        StringBuilder xml = new StringBuilder();
        xml.append("<xml>");
        for (Map.Entry<String, Object> entry : params.entrySet()) {
            String key = entry.getKey();
            String value = String.valueOf(entry.getValue());
            // 略过空值
            if (StringUtils.isEmpty(value))
                continue;
            xml.append("<").append(key).append(">");
            xml.append(entry.getValue());
            xml.append("</").append(key).append(">");
        }
        xml.append("</xml>");
        return xml.toString();
    }


    /**
     * @param fee
     * @return
     * @throws IOException
     * @郑思根 根据价格生成微信二维码NATIVE
     */
    public ResData createQR(Long fee) throws IOException {
        if (fee <= 0 || fee == null) return ResData.ofFail(1002, "参数类型异常");
        //获取准备数据
        Map<String, Object> params = preparingData("NATIVE", fee);
        params.put("sign", sign(params));
        //获取预支付订单
        Map<String, String> xmlMap = getAdvancePaymentOrder(params);
        return ResData.of(0, "成功", QRGenerate.getSmallQRGenerate(xmlMap.get("code_url")));
    }

    /***
     * @郑思根
     * 用户支付JSAPI
     * @fee
     * @return
     */
    public ResData pay(Long fee,User user) throws IOException {
        if (fee <= 0 || fee == null) return ResData.ofFail(1002, "参数类型异常");
        //获取用户openid
        String openId =  user.getOpenId();
        //获取准备数据
        Map<String, Object> params = preparingData("JSAPI", fee);
        params.put("openid", openId);
        params.put("sign", sign(params));
        //获取预支付订单
        Map<String, String> xmlMap = getAdvancePaymentOrder(params);
        // 支付配置
        Map<String, Object> packageParams = new TreeMap<>();
        //公众号名称，由商户传入
        packageParams.put("appId", wxSubscription.getAppid());
        //时间戳，自1970年以来的秒数
        packageParams.put("timeStamp", System.currentTimeMillis() / 1000 + "");
        //随机串
        packageParams.put("nonceStr", UUID.randomUUID().toString().replaceAll("-", ""));
        //预支付订单id
        packageParams.put("package", "prepay_id=" + xmlMap.get("prepay_id"));
        //微信签名方式：
        packageParams.put("signType", "MD5");
        //微信签名
        packageParams.put("paySign", sign(packageParams));
        return ResData.of(0, "成功", packageParams);
    }
}
