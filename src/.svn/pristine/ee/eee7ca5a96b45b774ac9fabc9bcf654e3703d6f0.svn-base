package com.c1801.spring.dzy.service;

import com.c1801.spring.dzy.common.Calculate;
import com.c1801.spring.dzy.common.RandomIdCreate;
import com.c1801.spring.dzy.common.ResData;
import com.c1801.spring.dzy.common.exception.OrderException;
import com.c1801.spring.dzy.mapper.OrderMapper;
import com.c1801.spring.dzy.mapper.SellBookMapper;
import com.c1801.spring.dzy.mapper.UserSubscribeMapper;
import com.c1801.spring.dzy.model.Address;
import com.c1801.spring.dzy.model.Book;
import com.c1801.spring.dzy.model.Cart;
import com.c1801.spring.dzy.model.Coupon;
import com.c1801.spring.dzy.model.Order;
import com.c1801.spring.dzy.model.OrderAccount;
import com.c1801.spring.dzy.model.OrderParam;
import com.c1801.spring.dzy.model.OrderPay;

import com.c1801.spring.dzy.mapper.UserMapper;
import com.c1801.spring.dzy.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Transactional
public class OrderService {

    @Autowired
    OrderMapper orderMapper;
    @Autowired
    SellBookMapper sellBookMapper;

    @Autowired
    UserMapper userMapper;
    @Autowired
    private CartService cartService;

    @Autowired
    private CouponService couponService;

    @Autowired
    private FreightService freightService;


    @Autowired
    private MessageTemplateService messageTemplateService;

    @Autowired
    private UserSubscribeMapper userSubscribeMapper;

    private long autoConfirmTime = 15 * 60 * 60;

    private Logger logger = LoggerFactory.getLogger(getClass());


    /**
     * id
     */
    @Autowired
    private RandomIdCreate randomIdCreate;

    public ResData changeOrderStatus(Order order) throws IOException {
        System.out.println(order);
        OrderAccount orderAccount = orderMapper.queryOrderAccountByOrderId(order.getId());
        if (order.getStatus() >= 10) {
            if (orderAccount.getStatus() >= 10) {
                return ResData.ofSuccess(0, "当前订单不支持取消");
            }
            //获取订单所有书籍
            List<Integer> bookId = new ArrayList<>();
            for (Book b : orderAccount.getOrderBooksConditions()) {
                bookId.add(b.getId());
            }
            //将卖书列表中的书籍从订单中删除
            sellBookMapper.sellBookWhetherInOrder(orderAccount.getUserId(), bookId, 0);
            orderMapper.cancelOrder(order.getId(), order.getStatus() + orderAccount.getStatus());
        } else {
            if (order.getStatus() > 4) {
                return ResData.ofSuccess(0, "当前状态不支持修改");
            }
            orderMapper.cancelOrder(order.getId(), order.getStatus());
        }
        //消息推送
        UserSubscribe userSubscribe = userSubscribeMapper.getUserSubscribe(orderAccount.getUserId());
        if (userSubscribe.getOrderStatus()) {
            User user = userMapper.getUserById(orderAccount.getUserId());
            OrderAccount temp = orderMapper.queryOrderAccountByOrderId(order.getId());
            messageTemplateService.sendOrderStatus(user, temp);
        }
        return ResData.ofSuccess(0, "状态修改成功");
    }



    /*
    1.查询库存
    2.预计算商品价格
    3.查询运费
    4.查询券是否可用
    5.扣券
    6.修改购物车商品状态 和 扣库存 校验库存和上下架状态
    7.生成订单
    8.生成订单商品记录
     */
    public Object purchaseOrder(OrderParam orderParam, Integer userId) throws OrderException {


        //1.查询库存

        List<Integer> cartIds = orderParam.getCartIds();
        //查询要生成订单商品中是在售有库存
        List<Cart> carts = cartService.queryPurchaseCarts(cartIds, userId);

        int count = cartIds.size();
        logger.info("要结算的购物商品数量："+ count);
        logger.info("要结算的购物商品："+ cartIds);

        /*
        查询出的购物车商品数量和要结算的商品相同且一样才能继续生产订单，
        否则 不能生产订单，需要用户再确认
         */
        List<Integer> queryCartIds = carts.stream().map(cart -> cart.getId()).collect(Collectors.toList());

        logger.info("确认后的购物车商品"+ queryCartIds);
        if (!(count == carts.size() && cartIds.containsAll(queryCartIds))) {
            throw new OrderException(3006, "结算的部分商品已发生改变");
        }

        //2.计算商品价格
        double total = carts.stream().mapToDouble(cart -> Calculate.mul(cart.getBook().getPrice(),Calculate.mul(cart.getDiscount(),0.1))).sum();
        BigDecimal totalDecimal = new BigDecimal(total);


        logger.info("商品总价："+total);


        //3.查询运费
        Freight freight = freightService.query(orderParam.getAddress().getProvince());

        if(freight == null || !freight.isShipments()){
            throw new OrderException(3007,"输入地址可能不在服务范围内");
        }
        //总价大于等于门槛免邮费
        //原运费
        double freightFee = total >= freight.getPinkage()? 0 : freight.getCharge();

        BigDecimal freightFeeDecimal = new BigDecimal(freightFee);


        logger.info("原运费："+freightFee);


        //4.有使用券 则查询券是否可用 ,类型是否正确

        Integer freightCouponId = orderParam.getFreightCouponId();

        //是否使用运费券
        if(freightCouponId != null){
            //免邮不能再使用运费券
            if(freightFee == 0 ){
                throw new OrderException(3010,"已包邮，不能使用运费券");
            }

            Coupon freightCoupon = queryCoupon(freightCouponId,1,userId);
            //运费是否高于门槛
            if(freightFee < freightCoupon.getPerLimit()) {
                throw new OrderException(3010,"未达到运费券使用门槛");
            }
            boolean isSucceed = couponService.useCoupon(freightCouponId);
            if(!isSucceed){
                throw new OrderException(3011,"请查看券是否可用");
            }
            /*
            计算运费金额
            运费券金额大于运费，优惠金额为freightFee，否则 优惠金额为运费券金额
             */

            //减去运费券后的运费金额
            freightFeeDecimal = getBigDecimal(freightFeeDecimal,freightCoupon.getAmount());
        }


        //包含运费的结算金额
        totalDecimal = totalDecimal.add(freightFeeDecimal);

        Integer couponId = orderParam.getCouponId();

        logger.info("包含运费的总价：" + totalDecimal.doubleValue());
        logger.info("优惠后的运费：" + freightFeeDecimal.doubleValue());


        //是否使用优惠券
        if (couponId != null) {
            Coupon coupon = queryCoupon(couponId,0,userId);
            if(totalDecimal.doubleValue() < coupon.getPerLimit()){
                throw new OrderException(3010,"优惠券未达到使用门槛");
            }
            boolean isSucceed = couponService.useCoupon(couponId);
            if(!isSucceed){
                throw new OrderException(3011,"请查看券是否可用");
            }
            //计算总价 final_price
            totalDecimal = getBigDecimal(totalDecimal,coupon.getAmount());
        }


        //5.修改购物车状态扣除库存
        int updateCarteCount = updateCartAndSku(queryCartIds, userId);

        logger.info("扣除库存的商品数量：" + updateCarteCount);

        //运费券抵扣金额
        BigDecimal freightSubtract = freightFeeDecimal.subtract(new BigDecimal(freightFee));
        //总优惠 运费券+抵扣券
        BigDecimal couponSubtract = totalDecimal.subtract(new BigDecimal(total+freightFee));

        logger.info("运费券抵扣金额：" + freightSubtract.doubleValue());
        logger.info("总优惠 运费券+抵扣券：" + couponSubtract.doubleValue());


        //7.生成订单
        Order order = createOrder(orderParam.getAddress(), total, freightFee,couponSubtract.subtract(freightFeeDecimal).doubleValue() ,freightSubtract.doubleValue() ,totalDecimal.doubleValue(), userId);


        logger.info(order.toString());
        //8.生成订单商品记录
//        throw new NullPointerException();
        return null;
    }


    /**
     * 价格减去优惠金额
     * @param price 价格
     * @param otherPrice 优惠金额
     * @return
     */
    private BigDecimal getBigDecimal(BigDecimal price,double otherPrice){
        if(price.doubleValue() > otherPrice){

            BigDecimal amountDecimal = new BigDecimal(otherPrice);
            price = price.subtract(amountDecimal);
        }else {
            price = new BigDecimal(0);
        }
        return price;
    }

    /**
     * 根据券id和券类型校对券
     * @param couponId
     * @param type
     * @param userId
     * @return
     * @throws OrderException
     */
    private Coupon queryCoupon(Integer couponId,Integer type,Integer userId) throws OrderException{
        //查询是否可用
        Coupon coupon = couponService.queryCouponByUser(couponId, userId);

        if(coupon == null){
            throw new OrderException(3008, "优惠券不可用");

            //优惠券类型与使用类型不一致
        }else if(!type.equals(coupon.getType())){

            throw new OrderException(3009, "该券类型不对");
        }
        return coupon;
    }

    /**
     * 修改购物车商品状态和扣除库存
     * @param cartIds
     * @param userId
     * @return
     */
    private int updateCartAndSku(List<Integer> cartIds, Integer userId) throws OrderException {

        int count = cartIds.size();
        //修改购物车商品状态和减库存
        int result = cartService.updateInOrderOfCartsAndStock(cartIds, 1, userId);
        /*
        因为同时修改购物车和库存 每一个商品有两条记录 返回结果为购物车商品数量的两倍
         */
        if (result != count * 2) {
            // 实际修改的与预期不修改数不同,需要用户再确认
            throw new OrderException(3006, "结算的部分商品已下架或没有库存");
        }
        return result;
    }


    /**
     * 创建订单
     * @param address 订单地址
     * @param total 订单商品价格
     * @param freightFee 运费
     * @param couponAmount 优惠券减免金额
     * @param freightAmount 运费券减免金额
     * @param userId 用户id
     * @return
     */
    private Order createOrder(Address address , double total, double freightFee,double couponAmount, double freightAmount, double finalPrice,Integer userId) {

        /**
         * 订单基本信息
         */
        OrderPay order = new OrderPay();
        Integer orderId = randomIdCreate.getNewOrderId();
        order.setId(orderId);
        order.setUserId(userId);
        order.setStatus(0);
        order.setType(1);
        order.setTotal(total);
        order.setFreight(freightFee);
        order.setProvince(address.getProvince());
        order.setCity(address.getCity());
        order.setDistrict(address.getDistrict());
        order.setStreet(address.getStreet());
        order.setUserName(address.getName());
        order.setPhone(address.getPhone());

        order.setOrderId(orderId);
        order.setAutoConfirmTime(autoConfirmTime);

        order.setCouponAmount(couponAmount);
        order.setFreightAmount(freightAmount);
        order.setFinalPrice(finalPrice);

        return order;
    }
}
