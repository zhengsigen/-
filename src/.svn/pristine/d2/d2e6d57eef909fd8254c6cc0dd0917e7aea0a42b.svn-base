package com.c1801.spring.dzy.service;

import com.c1801.spring.dzy.common.PageInfo;
import com.c1801.spring.dzy.common.ResData;
import com.c1801.spring.dzy.mapper.BookCollectionMapper;
import com.c1801.spring.dzy.mapper.BookMapper;
import com.c1801.spring.dzy.mapper.CollectionMapper;
import com.c1801.spring.dzy.model.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class CollectionService {

    @Autowired
    BookMapper bookMapper;

    @Autowired
    BookCollectionMapper bookCollectionMapper;

    @Autowired
    private CollectionMapper collectionMapper;

    private final Logger logger = LoggerFactory.getLogger(getClass());


    /***
     * @郑思根
     * 推荐书籍
     * @param recommendBook
     * @return
     */
    public ResData addBookAppointCollection(RecommendBook recommendBook){

        //判断用户是通过扫描还是手动输入isbn码
        if(recommendBook.getBookId()==null){
            //再通过isbn获取到书籍id
            Book book = bookMapper.queryBookByIBSN(recommendBook.getIsbn());
            if(book==null){
                return ResData.ofFail(20078,"该isbn码不存在");
            }
            recommendBook.setBookId(book.getId());
        }

        //查询该书的评分是否低于7.5
        Book book = bookMapper.queryBookById(recommendBook.getBookId());
        if(book==null){
            return  ResData.ofFail(20080,"推荐的书籍不存在");
        }

        if(book.getDoubanRate()<7.5){
            return  ResData.ofFail(20076,"推荐的书籍评分不能少于7.5");
        }

        //查询当前用户是否已经推荐过指定书籍
        RecommendBook queryMsg = bookCollectionMapper.queryRecommendBook(recommendBook);
        if(queryMsg!=null){
            return ResData.ofFail(20077,"您已推荐过这本书，请不要重复推荐");
        }

        //新增用户推荐书籍
        bookCollectionMapper.addRecommendBook(recommendBook);

        //根据返回的id查询到指定推荐关联数据返回给前端
        RecommendBook addMsg = bookCollectionMapper.queryRecommendBook(recommendBook);
        if(addMsg==null){
            return ResData.ofFail(20079,"推荐失败");

        }
        return ResData.of(0,"推荐成功",addMsg);
    }


    /***
     * @郑思根
     * 根据推荐id获取到 书单详情(书单推荐用户数量，书单推荐书籍数量)，书籍详情，用户详情，推荐详情
     * @param id
     * @return
     */
    public ResData queryRecommendAccountById(Integer id){

        //判断推荐id是否存在
        RecommendBook recommendBook = bookCollectionMapper.queryRecommendBookById(id);
        if(recommendBook==null){
            return ResData.ofFail(20081,"推荐id不存在");
        }

        //根据推荐id获取到 书单详情(书单推荐用户数量，书单推荐书籍数量)，书籍详情，用户详情，推荐详情
        RecommendAccount recommendAccount = bookCollectionMapper.queryRecommendAccountById(id);
        //根据书单id获取书单推荐书籍，书单推荐用户
        BookCollectionPack bookCollectionPack = bookCollectionMapper.queryCountByCollectionId(recommendAccount.getBookCollectionPack().getId());
        recommendAccount.getBookCollectionPack().setContributorsCount(bookCollectionPack.getContributorsCount());
        recommendAccount.getBookCollectionPack().setItemsCount(bookCollectionPack.getItemsCount());
        return ResData.of(0,"成功",recommendAccount);
    }



    /**
     * 蒋
     * 查询单个书单信息
     * @param collectionId
     * @return
     */
    public BookCollectionPack querySingleCollection(Integer collectionId){
        BookCollectionPack collectionPack = collectionMapper.querySingleCollection(collectionId);
        if(collectionPack.getId() == null){
            return null;
        }

        return collectionPack;
    }


    /**
     * 蒋
     * 查询书单中的推荐书籍信息
     * @return
     */
    public Map<String,Object> queryRecommedList(Integer collectionId, Integer pageSize, Integer pageNum, Date lastDate, Integer userId){

        Map<String ,Object> map = new HashMap<>();
        logger.info(collectionId + "");
        //查询书单的最后推荐的书
        PageHelper.startPage(1,1);
        Page<RecommendAccount> fristRecommend = collectionMapper.queryRecommendList(collectionId,1, 0, userId);

        logger.info(collectionId + "");

        RecommendAccount recommend = fristRecommend.getResult().get(0);
        map.put("frist",recommend);
        map.put("pageInfo",null);
        //只有一条或没有则不再继续查询
        if(fristRecommend.getResult().isEmpty()){
            return  map;
        }else if(fristRecommend.getTotal() == 1) {

            return map;
        }

        logger.info(recommend.getId()+"");

        PageHelper.startPage(pageNum,pageSize);
        Page<RecommendAccount> recommends = collectionMapper.queryRecommendList(collectionId, recommend.getId(),1,userId);
        PageInfo pageInfo = PageInfo.ofPageInfo(recommends);
        System.out.println(pageInfo.getList().get(0));

        map.put("pageInfo",pageInfo);
        return map;
    }








}
