package com.c1801.spring.dzy.controller.comment;

import com.c1801.spring.dzy.common.ResData;
import com.c1801.spring.dzy.mapper.CommentMapper;
import com.c1801.spring.dzy.model.BookComment;
import com.c1801.spring.dzy.model.User;
import com.c1801.spring.dzy.service.CommentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;
import java.util.List;

@RestController
@Transactional
@RequestMapping("/dzy/comment")
public class CommentController {

    @Autowired
    private CommentMapper commentMapper;

    @Autowired
    private CommentService commentService;
    //删除二级评论
    @DeleteMapping("/message")
    public ResData delMessage(@RequestParam("messageId") Integer messageId, HttpSession session) {
        User u = (User)session.getAttribute("user");
        System.out.println("删除操作：messageId：" + messageId + "，userId：" + u.getId());
        commentMapper.delMessage(messageId,u.getId());
        ResData resData = new ResData();
        resData.setCode(0);
        resData.setData("删除成功");
        System.out.println("返回结果：" + resData);
        return resData;
    }

    //删除一级评论包括底下的二级评论
    @DeleteMapping()
    public ResData delComment(@RequestParam("commentId") Integer commentId, HttpSession session) {
        User u = (User)session.getAttribute("user");
        System.out.println("删除操作：messageId：" + commentId + "，userId：" + u.getId());
        commentMapper.delMessageByCommentId(commentId);
        commentMapper.delComment(commentId,u.getId());
        ResData resData = new ResData();
        resData.setCode(0);
        resData.setData("删除成功");
        System.out.println("返回结果：" + resData);
        return resData;
    }

    /**
     * 马
     * 查询一级评论
     * @param bookId
     * @param pageSize
     * @param pageNum
     * @return
     */
    @GetMapping
    public ResData queryCommentList(@RequestParam("bookId")Integer bookId, @RequestParam(value = "pageSize", defaultValue = "5")Integer pageSize, @RequestParam(value = "pageNum", defaultValue = "1")Integer pageNum,  HttpSession session){

        User user = (User) session.getAttribute("user");

        if(user == null){
            user = new User();
        }
        List<BookComment> bookComment  = commentService.queryCommentList(bookId, pageSize, pageNum, user.getId());
        System.out.println("查询一级评论"+bookComment);
        return ResData.ofSuccess(0, "成功", bookComment);
    }

    /**
     * 马
     * 查询一级评论包括底下的二级评论
     * @param commentId
     * @param pageSize
     * @param pageNum
     * @return
     */
    @GetMapping("/message")
    public ResData queryCommentAndMessageList(@RequestParam("commentId")Integer commentId,@RequestParam("bookId")Integer bookId, @RequestParam(value = "pageSize", defaultValue = "5")Integer pageSize, @RequestParam(value = "pageNum", defaultValue = "1")Integer pageNum,  HttpSession session){

        User user = (User) session.getAttribute("user");

        if(user == null){
            user = new User();
        }
        BookComment bookComment  = commentService.queryCommentAndMessageList(commentId, bookId,pageSize, pageNum, user.getId());
        System.out.println("查询一级评论包括底下的二级评论"+bookComment);
        return ResData.ofSuccess(0, "成功", bookComment);
    }
}












